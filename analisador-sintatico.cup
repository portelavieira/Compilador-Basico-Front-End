import java.util.List;
import java.util.ArrayList;

parser code {:
    Scanner s;
    parser(Scanner s) { this.s = s; }

    List<String> createNode(String label, List<String>... children) {
        List<String> node = new ArrayList<>();
        node.add(label);
        for (List<String> child : children) {
            if (child != null) {
                node.addAll(child);
            }
        }
        return node;
    }
:}

scan with {: return s.next_token(); :};

terminal SEMI, PLUS, MINUS, TIMES, DIV, LBRACE, RBRACE, LPAREN, RPAREN;
terminal EQ, NEQ, GT, LT; // Novos terminais
terminal KW_IF, KW_ELSE, KW_WHILE, KW_INT, KW_FLOAT, KW_STRING, IDENTIFIER, NUMBER;

non terminal List<String> stmt_list, stmt, expr;
non terminal String type;

precedence left PLUS, MINUS;
precedence left TIMES, DIV;
precedence left EQ, NEQ, GT, LT; // Precedência para operadores relacionais
precedence nonassoc LPAREN, RPAREN;

start with stmt_list;

stmt_list ::= stmt_list:s stmt:e SEMI
               {: RESULT = createNode("stmt_list", s, e); :}
            | stmt:e SEMI
               {: RESULT = createNode("stmt_list", e); :};

stmt ::= type:typ IDENTIFIER:id
           {: RESULT = createNode("Declaração de variável: " + typ + " " + id.value); :}
       | KW_IF LPAREN expr:cond RPAREN stmt:if_stmt KW_ELSE stmt:else_stmt
           {: RESULT = createNode("IF/ELSE Statement", cond, if_stmt, else_stmt); :}
       | KW_WHILE LPAREN expr:cond RPAREN stmt:body
           {: RESULT = createNode("WHILE Loop", cond, body); :}
       | expr:expression
           {: RESULT = createNode("Expressão", expression); :}
       | error
           {: System.err.println("Erro de sintaxe em: " + s.next_token().value); :};

expr ::= expr:e1 PLUS expr:e2
           {: RESULT = createNode("+", e1, e2); :}
       | expr:e1 MINUS expr:e2
           {: RESULT = createNode("-", e1, e2); :}
       | expr:e1 TIMES expr:e2
           {: RESULT = createNode("*", e1, e2); :}
       | expr:e1 DIV expr:e2
           {: RESULT = createNode("/", e1, e2); :}
       | expr:e1 EQ expr:e2
           {: RESULT = createNode("==", e1, e2); :}
       | expr:e1 NEQ expr:e2
           {: RESULT = createNode("!=", e1, e2); :}
       | expr:e1 GT expr:e2
           {: RESULT = createNode(">", e1, e2); :}
       | expr:e1 LT expr:e2
           {: RESULT = createNode("<", e1, e2); :}
       | LPAREN expr:e RPAREN
           {: RESULT = e; :}
        | NUMBER:n
           {: RESULT = createNode("Número: " + ((String)n)); :} 
       | IDENTIFIER:id
           {: RESULT = createNode("Identificador: " + ((String)id)); :}; 


type ::= KW_INT {: RESULT = "int"; :}
       | KW_FLOAT {: RESULT = "float"; :}
       | KW_STRING {: RESULT = "string"; :};
