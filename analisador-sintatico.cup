import java.util.Stack;
import java.util.List;
import java.util.ArrayList;

parser code {:
    Scanner s;
    parser(Scanner s) { this.s = s; }

    List<String> createNode(String label, List<String>... children) {
        List<String> node = new ArrayList<>();
        node.add(label);
        for (List<String> child : children) {
            if (child != null) {
                node.addAll(child);
            }
        }
        return node;
    }
:}

scan with {: return s.next_token(); :};

terminal SEMI, PLUS, MINUS, TIMES, DIV, EQ, NEQ, LBRACE, RBRACE, LPAREN, RPAREN;
terminal KW_IF, KW_ELSE, KW_WHILE, KW_RETURN, IDENTIFIER, NUMBER;

non terminal List<String> stmt_list, stmt, expr;
non terminal String type;

precedence left PLUS, MINUS;
precedence left TIMES, DIV;

start with stmt_list;

stmt_list ::= stmt_list:s stmt:e SEMI
               {: $$ = createNode("stmt_list", $s, $e); :}
            | stmt:e SEMI
               {: $$ = createNode("stmt_list", $e); :};

stmt ::= type:typ IDENTIFIER:id
           {: $$ = createNode("Declaração de variável: " + $typ + " " + id.value); :}
       | KW_IF LPAREN expr:cond RPAREN stmt:if_stmt KW_ELSE stmt:else_stmt
           {: $$ = createNode("IF/ELSE Statement", $cond, $if_stmt, $else_stmt); :}
       | KW_WHILE LPAREN expr:cond RPAREN stmt:body
           {: $$ = createNode("WHILE Loop", $cond, $body); :}
       | LBRACE stmt_list:block RBRACE
           {: $$ = createNode("Bloco", $block); :};

expr ::= expr:e1 PLUS expr:e2
           {: $$ = createNode("+", $e1, $e2); :}
       | expr:e1 MINUS expr:e2
           {: $$ = createNode("-", $e1, $e2); :}
       | expr:e1 TIMES expr:e2
           {: $$ = createNode("*", $e1, $e2); :}
       | expr:e1 DIV expr:e2
           {: $$ = createNode("/", $e1, $e2); :}
       | LPAREN expr:e RPAREN
           {: $$ = $e; :}
       | NUMBER:n
           {: $$ = createNode("Número: " + n.value); :}
       | IDENTIFIER:id
           {: $$ = createNode("Identificador: " + id.value); :};
